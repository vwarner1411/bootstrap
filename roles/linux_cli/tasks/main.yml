- name: Install additional Debian packages
  ansible.builtin.apt:
    name:
      - btop
      - lsd
      - fzf
      - yt-dlp
      - mosh
      - ansible
      - python3-pip
      - python3-venv
    state: present
  when: ansible_facts.os_family == "Debian"
- name: Check current PowerShell version
  ansible.builtin.command: pwsh --version
  register: powershell_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest PowerShell release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/PowerShell/PowerShell/releases/latest
    return_content: true
  register: powershell_release
  when: ansible_facts.os_family == "Debian"

- name: Set PowerShell release facts
  ansible.builtin.set_fact:
    powershell_target_version: "{{ powershell_release.json.tag_name }}"
    powershell_asset: >-
      {{
        (
          powershell_release.json.assets
          | selectattr('name', 'search', 'linux-x64\.tar\.gz$')
          | map(attribute='browser_download_url')
          | list
          | first
        )
        | default('', true)
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download PowerShell release
  ansible.builtin.get_url:
    url: "{{ powershell_asset }}"
    dest: /tmp/powershell.tar.gz
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - powershell_asset | length > 0
    - powershell_version_check.stdout is not defined or powershell_target_version not in powershell_version_check.stdout

- name: Create PowerShell installation directory
  ansible.builtin.file:
    path: /opt/microsoft/powershell
    state: directory
    mode: "0755"
  when: ansible_facts.os_family == "Debian"

- name: Extract PowerShell archive
  ansible.builtin.unarchive:
    src: /tmp/powershell.tar.gz
    dest: /opt/microsoft/powershell
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - powershell_asset | length > 0
    - powershell_version_check.stdout is not defined or powershell_target_version not in powershell_version_check.stdout

- name: Ensure PowerShell symlink exists
  ansible.builtin.file:
    src: /opt/microsoft/powershell/pwsh
    dest: /usr/local/bin/pwsh
    state: link
    force: true
  when: ansible_facts.os_family == "Debian"

- name: Install ncurses-term for kitty terminfo
  ansible.builtin.apt:
    name: ncurses-term
    state: present
  when: ansible_facts.os_family == "Debian"

- name: Check current starship version
  ansible.builtin.command: starship --version
  register: starship_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest starship release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/starship/starship/releases/latest
    return_content: true
  register: starship_release
  when: ansible_facts.os_family == "Debian"

- name: Set starship release facts
  ansible.builtin.set_fact:
    starship_target_version: "{{ starship_release.json.tag_name }}"
    starship_asset_url: >-
      {{
        (
          starship_release.json.assets
          | selectattr('name', 'search', 'x86_64-unknown-linux-gnu.tar.gz$')
          | map(attribute='browser_download_url')
          | list
          | first
        )
        | default('', true)
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download starship release
  ansible.builtin.get_url:
    url: "{{ starship_asset_url }}"
    dest: /tmp/starship.tar.gz
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - starship_asset_url | length > 0
    - starship_version_check.stdout is not defined or starship_target_version not in starship_version_check.stdout

- name: Install starship binary
  ansible.builtin.unarchive:
    src: /tmp/starship.tar.gz
    dest: /usr/local/bin
    remote_src: true
    mode: "0755"
  when:
    - ansible_facts.os_family == "Debian"
    - starship_asset_url | length > 0
    - starship_version_check.stdout is not defined or starship_target_version not in starship_version_check.stdout

- name: Ensure starship binary is executable
  ansible.builtin.file:
    path: /usr/local/bin/starship
    mode: "0755"
  when: ansible_facts.os_family == "Debian"

- name: Check current yazi version
  ansible.builtin.command: yazi --version
  register: yazi_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest yazi release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/sxyazi/yazi/releases/latest
    return_content: true
  register: yazi_release
  when: ansible_facts.os_family == "Debian"

- name: Set yazi release facts
  ansible.builtin.set_fact:
    yazi_target_version: "{{ yazi_release.json.tag_name }}"
    yazi_asset_name: >-
      {{
        (
          yazi_release.json.assets
          | selectattr('name', 'search', 'x86_64-unknown-linux-gnu.zip$')
          | map(attribute='name')
          | list
          | first
        )
        | default('', true)
      }}
    yazi_asset_url: >-
      {{
        (
          yazi_release.json.assets
          | selectattr('name', 'search', 'x86_64-unknown-linux-gnu.zip$')
          | map(attribute='browser_download_url')
          | list
          | first
        )
        | default('', true)
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download yazi release
  ansible.builtin.get_url:
    url: "{{ yazi_asset_url }}"
    dest: /tmp/yazi.zip
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - yazi_asset_url | length > 0
    - yazi_version_check.stdout is not defined or yazi_target_version not in yazi_version_check.stdout

- name: Prepare yazi install directory
  ansible.builtin.file:
    path: /usr/local/share/yazi
    state: directory
    mode: "0755"
  when: ansible_facts.os_family == "Debian"

- name: Unpack yazi release
  ansible.builtin.unarchive:
    src: /tmp/yazi.zip
    dest: /usr/local/share/yazi
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - yazi_asset_url | length > 0
    - yazi_version_check.stdout is not defined or yazi_target_version not in yazi_version_check.stdout

- name: Copy yazi binary into PATH
  ansible.builtin.copy:
    src: "/usr/local/share/yazi/{{ (yazi_asset_name | regex_replace('\\.zip$', '')) }}/yazi"
    dest: /usr/local/bin/yazi
    remote_src: true
    mode: "0755"
  when:
    - ansible_facts.os_family == "Debian"
    - yazi_asset_name | length > 0

- name: Symlink yazi share directory
  ansible.builtin.file:
    src: "/usr/local/share/yazi/{{ (yazi_asset_name | regex_replace('\\.zip$', '')) }}/share"
    dest: /usr/local/share/yazi/share
    state: link
    force: true
  when:
    - ansible_facts.os_family == "Debian"
    - yazi_asset_name | length > 0
