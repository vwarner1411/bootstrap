# Everything in this file only applies on Debian-family hosts

- name: Update apt cache and install base packages
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
    name:
      - ncurses-term
      - xz-utils
      - bzip2
      - tar
      - curl
      - ca-certificates
      - build-essential
      - python3-venv
      - pipx
      - unzip
    state: present
  when: ansible_facts.os_family == "Debian"

- name: Install build dependencies for mosh
  ansible.builtin.apt:
    name:
      - protobuf-compiler
      - libprotobuf-dev
      - pkg-config
      - libutempter-dev
      - libncurses-dev
      - zlib1g-dev
      - autoconf
      - automake
      - libtool
      - libssl-dev
    state: present
  when: ansible_facts.os_family == "Debian"

- name: Define GitHub download staging directory
  ansible.builtin.set_fact:
    linux_cli_download_dir: /tmp/zshell-github-downloads
  when: ansible_facts.os_family == "Debian"

- name: Ensure GitHub download staging directory exists
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}"
    state: directory
    mode: "0755"
  when: ansible_facts.os_family == "Debian"

- name: Normalize architecture strings for GitHub assets
  ansible.builtin.set_fact:
    arch_cpu: >-
      {{ 'x86_64' if ansible_facts.architecture in ['x86_64', 'amd64']
         else 'aarch64' if ansible_facts.architecture in ['aarch64', 'arm64']
         else ansible_facts.architecture }}
    arch_go: >-
      {{ 'amd64' if ansible_facts.architecture in ['x86_64', 'amd64']
         else 'arm64' if ansible_facts.architecture in ['aarch64', 'arm64']
         else ansible_facts.architecture }}
  when: ansible_facts.os_family == "Debian"

# PowerShell ###################################################################
- name: Fetch latest PowerShell release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/PowerShell/PowerShell/releases/latest
    return_content: true
  register: powershell_release
  when: ansible_facts.os_family == "Debian"

- name: Set PowerShell release facts
  ansible.builtin.set_fact:
    powershell_target_version: "{{ powershell_release.json.tag_name }}"
    powershell_asset: >-
      {{
        (
          powershell_release.json.assets
          | selectattr('name', 'search', 'linux-x64\.tar\.gz$')
          | map(attribute='browser_download_url')
          | list
          | first
        )
        | default('', true)
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download PowerShell release
  ansible.builtin.get_url:
    url: "{{ powershell_asset }}"
    dest: /tmp/powershell.tar.gz
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - powershell_asset | length > 0
    - powershell_version_check.stdout is not defined or powershell_target_version not in powershell_version_check.stdout

- name: Create PowerShell installation directory
  ansible.builtin.file:
    path: /opt/microsoft/powershell
    state: directory
    mode: "0755"
  when: ansible_facts.os_family == "Debian"

- name: Extract PowerShell archive
  ansible.builtin.unarchive:
    src: /tmp/powershell.tar.gz
    dest: /opt/microsoft/powershell
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - powershell_asset | length > 0
    - powershell_version_check.stdout is not defined or powershell_target_version not in powershell_version_check.stdout

- name: Ensure PowerShell symlink exists
  ansible.builtin.file:
    src: /opt/microsoft/powershell/pwsh
    dest: /usr/local/bin/pwsh
    state: link
    force: true
  when: ansible_facts.os_family == "Debian"

# kitty ########################################################################
- name: Check current kitty version
  ansible.builtin.command: kitty --version
  register: kitty_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest kitty release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/kovidgoyal/kitty/releases/latest
    return_content: true
    headers:
      Accept: application/vnd.github+json
      User-Agent: zshell-ansible
  register: kitty_release
  retries: 3
  delay: 2
  until: kitty_release.status == 200
  when: ansible_facts.os_family == "Debian"

- name: Set kitty release facts
  ansible.builtin.set_fact:
    kitty_target_version: "{{ (kitty_release.json.tag_name | default('')) | regex_replace('^v', '') }}"
  when: ansible_facts.os_family == "Debian"

- name: Set kitty asset URL
  ansible.builtin.set_fact:
    kitty_asset: >-
      {{
        (kitty_release.json.assets | default([]))
        | selectattr('name', 'match', '^kitty-' ~ kitty_target_version ~ '-' ~ arch_cpu ~ '\\.txz$')
        | map(attribute='browser_download_url')
        | list
        | first
        | default('', true)
      }}
  when: ansible_facts.os_family == "Debian"

- name: Determine if kitty install is required
  ansible.builtin.set_fact:
    kitty_install_required: >-
      {{
        (kitty_asset | length > 0) and
        (kitty_version_check.stdout is not defined or kitty_target_version not in kitty_version_check.stdout)
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download kitty release
  ansible.builtin.get_url:
    url: "{{ kitty_asset }}"
    dest: "{{ linux_cli_download_dir }}/kitty.txz"
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - kitty_install_required

- name: Ensure kitty version directory exists
  ansible.builtin.file:
    path: "/opt/kitty-{{ kitty_target_version }}"
    state: directory
    mode: "0755"
  when:
    - ansible_facts.os_family == "Debian"
    - kitty_install_required

- name: Extract kitty release
  ansible.builtin.unarchive:
    src: "{{ linux_cli_download_dir }}/kitty.txz"
    dest: "/opt/kitty-{{ kitty_target_version }}"
    remote_src: true
    extra_opts:
      - "--strip-components=1"
  when:
    - ansible_facts.os_family == "Debian"
    - kitty_install_required

- name: Ensure kitty binary permissions
  ansible.builtin.file:
    path: "/opt/kitty-{{ kitty_target_version }}/bin/kitty"
    state: file
    mode: "0755"
  when:
    - ansible_facts.os_family == "Debian"
    - kitty_install_required

- name: Update kitty current symlink
  ansible.builtin.file:
    src: "/opt/kitty-{{ kitty_target_version }}"
    dest: /opt/kitty
    state: link
    force: true
  when:
    - ansible_facts.os_family == "Debian"
    - kitty_install_required

- name: Ensure kitty symlink exists
  ansible.builtin.file:
    src: /opt/kitty/bin/kitty
    dest: /usr/local/bin/kitty
    state: link
    force: true
  when:
    - ansible_facts.os_family == "Debian"
    - (kitty_version_check.rc | default(1)) == 0 or kitty_install_required

- name: Clean kitty archive
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/kitty.txz"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - kitty_install_required

# btop #########################################################################
- name: Check current btop version
  ansible.builtin.command: btop --version
  register: btop_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest btop release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/aristocratos/btop/releases/latest
    return_content: true
    headers:
      Accept: application/vnd.github+json
      User-Agent: zshell-ansible
  register: btop_release
  retries: 3
  delay: 2
  until: btop_release.status == 200
  when: ansible_facts.os_family == "Debian"

- name: Set btop release facts
  ansible.builtin.set_fact:
    btop_target_version: "{{ (btop_release.json.tag_name | default('')) | regex_replace('^v', '') }}"
  when: ansible_facts.os_family == "Debian"

- name: Set btop asset URL
  ansible.builtin.set_fact:
    btop_asset: >-
      {{
        (btop_release.json.assets | default([]))
        | selectattr('name', 'match', '^btop-' ~ arch_cpu ~ '-linux-musl\\.tbz$')
        | map(attribute='browser_download_url')
        | list
        | first
        | default('', true)
      }}
  when: ansible_facts.os_family == "Debian"

- name: Determine if btop install is required
  ansible.builtin.set_fact:
    btop_install_required: >-
      {{
        (btop_asset | length > 0) and
        (
          (btop_version_check.rc | default(1)) != 0 or
          (btop_version_check.stdout is defined and btop_target_version not in btop_version_check.stdout)
        )
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download btop release
  ansible.builtin.get_url:
    url: "{{ btop_asset }}"
    dest: "{{ linux_cli_download_dir }}/btop.tbz"
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - btop_install_required

- name: Unpack btop release
  ansible.builtin.unarchive:
    src: "{{ linux_cli_download_dir }}/btop.tbz"
    dest: "{{ linux_cli_download_dir }}"
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - btop_install_required

- name: Install btop
  ansible.builtin.command:
    cmd: ./install.sh --prefix /usr/local --silent
    chdir: "{{ linux_cli_download_dir }}/btop"
  changed_when: true
  when:
    - ansible_facts.os_family == "Debian"
    - btop_install_required

- name: Remove btop build directory
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/btop"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - btop_install_required

- name: Clean btop archive
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/btop.tbz"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - btop_install_required

# lsd ##########################################################################
- name: Check current lsd version
  ansible.builtin.command: lsd --version
  register: lsd_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest lsd release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/lsd-rs/lsd/releases/latest
    return_content: true
    headers:
      Accept: application/vnd.github+json
      User-Agent: zshell-ansible
  register: lsd_release
  retries: 3
  delay: 2
  until: lsd_release.status == 200
  when: ansible_facts.os_family == "Debian"

- name: Set lsd release facts
  ansible.builtin.set_fact:
    lsd_target_version_raw: "{{ lsd_release.json.tag_name | default('') }}"
    lsd_target_version: "{{ lsd_target_version_raw | regex_replace('^v', '') }}"
    lsd_triple: "{{ arch_cpu ~ '-unknown-linux-gnu' }}"
    lsd_asset: >-
      {{
        (lsd_release.json.assets | default([]))
        | selectattr('name', 'match', '^lsd-' ~ lsd_target_version ~ '-' ~ lsd_triple ~ '\\.tar\\.gz$')
        | map(attribute='browser_download_url')
        | list
        | first
        | default('', true)
      }}
    lsd_present: "{{ (lsd_version_check.rc | default(1)) == 0 }}"
    lsd_present_version: >-
      {{
        (lsd_version_check.stdout | default(''))
        | regex_search('([0-9]+(\\.[0-9]+)+)')
        | default('')
      }}
    lsd_needs_install: >-
      {{
        (lsd_asset | length > 0) and
        (
          (not lsd_present) or
          (lsd_present_version != lsd_target_version)
        )
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download lsd release
  ansible.builtin.get_url:
    url: "{{ lsd_asset }}"
    dest: "{{ linux_cli_download_dir }}/lsd.tar.gz"
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - lsd_needs_install

- name: Unpack lsd release
  ansible.builtin.unarchive:
    src: "{{ linux_cli_download_dir }}/lsd.tar.gz"
    dest: "{{ linux_cli_download_dir }}"
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - lsd_needs_install

- name: Install lsd binary
  ansible.builtin.copy:
    src: "{{ linux_cli_download_dir }}/lsd-{{ lsd_target_version }}-{{ lsd_triple }}/lsd"
    dest: /usr/local/bin/lsd
    mode: "0755"
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - lsd_needs_install

- name: Remove lsd build directory
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/lsd-{{ lsd_target_version }}-{{ lsd_triple }}"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - lsd_needs_install

- name: Clean lsd archive
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/lsd.tar.gz"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - lsd_needs_install

# fzf ##########################################################################
- name: Check current fzf version
  ansible.builtin.command: fzf --version
  register: fzf_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest fzf release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/junegunn/fzf/releases/latest
    return_content: true
    headers:
      Accept: application/vnd.github+json
      User-Agent: zshell-ansible
  register: fzf_release
  retries: 3
  delay: 2
  until: fzf_release.status == 200
  when: ansible_facts.os_family == "Debian"

- name: Set fzf release facts
  ansible.builtin.set_fact:
    fzf_target_version_raw: "{{ fzf_release.json.tag_name | default('') }}"
    fzf_target_version: "{{ fzf_target_version_raw | regex_replace('^v', '') }}"
    fzf_asset: >-
      {{
        (fzf_release.json.assets | default([]))
        | selectattr('name', 'match', '^fzf-' ~ fzf_target_version ~ '-linux_' ~ arch_go ~ '\\.tar\\.gz$')
        | map(attribute='browser_download_url')
        | list
        | first
        | default('', true)
      }}
    fzf_present: "{{ (fzf_version_check.rc | default(1)) == 0 }}"
    fzf_present_version: >-
      {{
        (fzf_version_check.stdout | default(''))
        | regex_search('^([0-9]+(\\.[0-9]+)+)')
        | default('')
      }}
    fzf_needs_install: >-
      {{
        (fzf_asset | length > 0) and
        (
          (not fzf_present) or
          (fzf_present_version != fzf_target_version)
        )
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download fzf release
  ansible.builtin.get_url:
    url: "{{ fzf_asset }}"
    dest: "{{ linux_cli_download_dir }}/fzf.tar.gz"
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - fzf_needs_install

- name: Unpack fzf release
  ansible.builtin.unarchive:
    src: "{{ linux_cli_download_dir }}/fzf.tar.gz"
    dest: "{{ linux_cli_download_dir }}"
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - fzf_needs_install

- name: Install fzf binary
  ansible.builtin.copy:
    src: "{{ linux_cli_download_dir }}/fzf"
    dest: /usr/local/bin/fzf
    mode: "0755"
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - fzf_needs_install

- name: Remove fzf build artifacts
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/fzf"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - fzf_needs_install

- name: Clean fzf archive
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/fzf.tar.gz"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - fzf_needs_install

# starship #####################################################################
- name: Check current starship version
  ansible.builtin.command: starship --version
  register: starship_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest starship release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/starship/starship/releases/latest
    return_content: true
    headers:
      Accept: application/vnd.github+json
      User-Agent: zshell-ansible
  register: starship_release
  retries: 3
  delay: 2
  until: starship_release.status == 200
  when: ansible_facts.os_family == "Debian"

- name: Set starship release facts
  ansible.builtin.set_fact:
    starship_target_version_raw: "{{ starship_release.json.tag_name | default('') }}"
    starship_target_version: "{{ starship_target_version_raw | regex_replace('^v', '') }}"
    starship_asset: >-
      {{
        (starship_release.json.assets | default([]))
        | selectattr('name', 'match', '^starship-' ~ arch_cpu ~ '-unknown-linux-gnu\\.tar\\.gz$')
        | map(attribute='browser_download_url')
        | list
        | first
        | default('', true)
      }}
    starship_present: "{{ (starship_version_check.rc | default(1)) == 0 }}"
    starship_present_version: >-
      {{
        (starship_version_check.stdout | default(''))
        | regex_search('([0-9]+(\\.[0-9]+)+)')
        | default('')
      }}
    starship_needs_install: >-
      {{
        (starship_asset | length > 0) and
        (
          (not starship_present) or
          (starship_present_version != starship_target_version)
        )
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download starship release
  ansible.builtin.get_url:
    url: "{{ starship_asset }}"
    dest: "{{ linux_cli_download_dir }}/starship.tar.gz"
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - starship_needs_install

- name: Unpack starship release
  ansible.builtin.unarchive:
    src: "{{ linux_cli_download_dir }}/starship.tar.gz"
    dest: "{{ linux_cli_download_dir }}"
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - starship_needs_install

- name: Install starship binary
  ansible.builtin.copy:
    src: "{{ linux_cli_download_dir }}/starship"
    dest: /usr/local/bin/starship
    mode: "0755"
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - starship_needs_install

- name: Remove starship build artifacts
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/starship"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - starship_needs_install

- name: Clean starship archive
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/starship.tar.gz"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - starship_needs_install

# yazi #########################################################################
- name: Check current yazi version
  ansible.builtin.command: yazi --version
  register: yazi_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest yazi release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/sxyazi/yazi/releases/latest
    return_content: true
    headers:
      Accept: application/vnd.github+json
      User-Agent: zshell-ansible
  register: yazi_release
  retries: 3
  delay: 2
  until: yazi_release.status == 200
  when: ansible_facts.os_family == "Debian"

- name: Set yazi release facts
  ansible.builtin.set_fact:
    yazi_target_version_raw: "{{ yazi_release.json.tag_name | default('') }}"
    yazi_target_version: "{{ yazi_target_version_raw | regex_replace('^v', '') }}"
    yazi_asset: >-
      {{
        (yazi_release.json.assets | default([]))
        | selectattr('name', 'match', '^yazi-' ~ arch_cpu ~ '-unknown-linux-gnu\\.tar\\.xz$')
        | map(attribute='browser_download_url')
        | list
        | first
        | default('', true)
      }}
    yazi_present: "{{ (yazi_version_check.rc | default(1)) == 0 }}"
    yazi_present_version: >-
      {{
        (yazi_version_check.stdout | default(''))
        | regex_search('([0-9]+(\\.[0-9]+)+)')
        | default('')
      }}
    yazi_needs_install: >-
      {{
        (yazi_asset | length > 0) and
        (
          (not yazi_present) or
          (yazi_present_version != yazi_target_version)
        )
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download yazi release
  ansible.builtin.get_url:
    url: "{{ yazi_asset }}"
    dest: "{{ linux_cli_download_dir }}/yazi.tar.xz"
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - yazi_needs_install

- name: Ensure yazi version directory exists
  ansible.builtin.file:
    path: "/opt/yazi-{{ yazi_target_version }}"
    state: directory
    mode: "0755"
  when:
    - ansible_facts.os_family == "Debian"
    - yazi_needs_install

- name: Extract yazi release
  ansible.builtin.unarchive:
    src: "{{ linux_cli_download_dir }}/yazi.tar.xz"
    dest: "/opt/yazi-{{ yazi_target_version }}"
    remote_src: true
    extra_opts:
      - "--strip-components=1"
  when:
    - ansible_facts.os_family == "Debian"
    - yazi_needs_install

- name: Update yazi current symlink
  ansible.builtin.file:
    src: "/opt/yazi-{{ yazi_target_version }}"
    dest: /opt/yazi
    state: link
    force: true
  when:
    - ansible_facts.os_family == "Debian"
    - yazi_needs_install

- name: Ensure yazi binary permissions
  ansible.builtin.file:
    path: /opt/yazi/bin/yazi
    state: file
    mode: "0755"
  when:
    - ansible_facts.os_family == "Debian"
    - yazi_needs_install

- name: Ensure yazi symlink exists
  ansible.builtin.file:
    src: /opt/yazi/bin/yazi
    dest: /usr/local/bin/yazi
    state: link
    force: true
  when:
    - ansible_facts.os_family == "Debian"
    - (yazi_needs_install or yazi_present)

- name: Clean yazi archive
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/yazi.tar.xz"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - yazi_needs_install

# mosh #########################################################################
- name: Check current mosh version
  ansible.builtin.command: mosh --version
  register: mosh_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest mosh release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/mobile-shell/mosh/releases/latest
    return_content: true
    headers:
      Accept: application/vnd.github+json
      User-Agent: zshell-ansible
  register: mosh_release
  retries: 3
  delay: 2
  until: mosh_release.status == 200
  when: ansible_facts.os_family == "Debian"

- name: Set mosh release facts
  ansible.builtin.set_fact:
    mosh_target_version_raw: "{{ mosh_release.json.tag_name | default('') }}"
    mosh_target_version: "{{ mosh_target_version_raw | regex_replace('^v', '') }}"
    mosh_asset: >-
      {{
        (mosh_release.json.assets | default([]))
        | selectattr('name', 'match', '^mosh-' ~ mosh_target_version ~ '\\.tar\\.gz$')
        | map(attribute='browser_download_url')
        | list
        | first
        | default('', true)
      }}
    mosh_present: "{{ (mosh_version_check.rc | default(1)) == 0 }}"
    mosh_present_version: >-
      {{
        (mosh_version_check.stdout | default(''))
        | regex_search('([0-9]+(\\.[0-9]+)+)')
        | default('')
      }}
    mosh_needs_install: >-
      {{
        (mosh_asset | length > 0) and
        (
          (not mosh_present) or
          (mosh_present_version != mosh_target_version)
        )
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download mosh release
  ansible.builtin.get_url:
    url: "{{ mosh_asset }}"
    dest: "{{ linux_cli_download_dir }}/mosh.tar.gz"
    mode: "0644"
  when:
    - ansible_facts.os_family == "Debian"
    - mosh_needs_install

- name: Unpack mosh release
  ansible.builtin.unarchive:
    src: "{{ linux_cli_download_dir }}/mosh.tar.gz"
    dest: "{{ linux_cli_download_dir }}"
    remote_src: true
  when:
    - ansible_facts.os_family == "Debian"
    - mosh_needs_install

- name: Configure mosh
  ansible.builtin.command:
    cmd: ./configure --prefix=/usr/local
    chdir: "{{ linux_cli_download_dir }}/mosh-{{ mosh_target_version }}"
    creates: "{{ linux_cli_download_dir }}/mosh-{{ mosh_target_version }}/config.status"
  when:
    - ansible_facts.os_family == "Debian"
    - mosh_needs_install

- name: Build mosh
  ansible.builtin.command:
    cmd: make -j{{ ansible_facts.processor_vcpus | default(ansible_facts.processor_count | default(1)) }}
    chdir: "{{ linux_cli_download_dir }}/mosh-{{ mosh_target_version }}"
    creates: "{{ linux_cli_download_dir }}/mosh-{{ mosh_target_version }}/src/frontend/mosh"
  when:
    - ansible_facts.os_family == "Debian"
    - mosh_needs_install

- name: Install mosh
  ansible.builtin.command:
    cmd: make install
    chdir: "{{ linux_cli_download_dir }}/mosh-{{ mosh_target_version }}"
  changed_when: true
  when:
    - ansible_facts.os_family == "Debian"
    - mosh_needs_install

- name: Remove mosh build directory
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/mosh-{{ mosh_target_version }}"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - mosh_needs_install

- name: Clean mosh archive
  ansible.builtin.file:
    path: "{{ linux_cli_download_dir }}/mosh.tar.gz"
    state: absent
  when:
    - ansible_facts.os_family == "Debian"
    - mosh_needs_install

# yt-dlp #######################################################################
- name: Check current yt-dlp version
  ansible.builtin.command: yt-dlp --version
  register: ytdlp_version_check
  changed_when: false
  failed_when: false
  when: ansible_facts.os_family == "Debian"

- name: Fetch latest yt-dlp release metadata
  ansible.builtin.uri:
    url: https://api.github.com/repos/yt-dlp/yt-dlp/releases/latest
    return_content: true
    headers:
      Accept: application/vnd.github+json
      User-Agent: zshell-ansible
  register: ytdlp_release
  retries: 3
  delay: 2
  until: ytdlp_release.status == 200
  when: ansible_facts.os_family == "Debian"

- name: Set yt-dlp release facts
  ansible.builtin.set_fact:
    ytdlp_target_version_raw: "{{ ytdlp_release.json.tag_name | default('') }}"
    ytdlp_target_version: "{{ ytdlp_target_version_raw | regex_replace('^v', '') }}"
    ytdlp_asset: >-
      {{
        (ytdlp_release.json.assets | default([]))
        | selectattr('name', 'equalto', 'yt-dlp')
        | map(attribute='browser_download_url')
        | list
        | first
        | default('', true)
      }}
    ytdlp_present: "{{ (ytdlp_version_check.rc | default(1)) == 0 }}"
    ytdlp_present_version: "{{ ytdlp_version_check.stdout | default('') }}"
    ytdlp_needs_install: >-
      {{
        (ytdlp_asset | length > 0) and
        (
          (not ytdlp_present) or
          (ytdlp_target_version not in ytdlp_present_version)
        )
      }}
  when: ansible_facts.os_family == "Debian"

- name: Download yt-dlp release
  ansible.builtin.get_url:
    url: "{{ ytdlp_asset }}"
    dest: /usr/local/bin/yt-dlp
    mode: "0755"
  when:
    - ansible_facts.os_family == "Debian"
    - ytdlp_needs_install
